name: CI

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: false
        description: |
          Artifacts version to publish and for tests.
          If not specified, then `ref_name`, `head_ref` or `latest` will be used based on event.
      force-publish:
        type: boolean
        required: false
        default: false
        description: |
          Force publish artifacts. 
          If false, artifacts will be published only on `release` or on `push` to `develop/master`.
      tests:
        type: boolean
        required: false
        default: true
        description: Run tests.
      mvn-verify-opts:
        type: string
        required: false
        default: "['']"
      fail-on-vulnerability-issues:
        type: string
        required: false
        default: '0'
        description: |
          Fail pipeline if CVEs are identified.
          Default is '0', possible values '0' or '1'
    secrets:
      ORGANIZATION_TOKEN:
        required: true
      HELM_REGISTRY_URL:
        required: true
      HELM_REGISTRY_USER:
        required: true
      HELM_REGISTRY_PASSWORD:
        required: true
      GCP_DEB_REGISTRY_CREDENTIALS:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  VERSION: >
    ${{ 
      inputs.version && inputs.version 
      || (github.event_name == 'push' || github.event_name == 'release') && github.ref_name 
      || (github.event_name == 'pull_request') && github.head_ref 
      || 'latest' 
    }}

jobs:
  test:
    name: test job
    runs-on: ubuntu-latest
    steps:
      - name: test
        run: echo '# Test ðŸš€' >> $GITHUB_STEP_SUMMARY
  build:
    name: Build (${{ matrix.arch }}) and mvn verify ${{ matrix.mvn-verify-opts }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [ 'linux/amd64' ]
        mvn-verify-opts: ${{ fromJson(inputs.mvn-verify-opts) }}
    steps:
      - name: test
        run: echo '# Build ðŸš€' >> $GITHUB_STEP_SUMMARY
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
      - name: Set up Maven
        run: cp build.settings.xml ~/.m2/settings.xml
      - name: Maven Build
        run: mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true -Ddockerfile.skip=true -Dgithub.event.release.prerelease="${{ github.event.release.prerelease }}" -B -V -U
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        run: docker login ghcr.io -u ${GITHUB_ACTOR} --password ${{ secrets.ORGANIZATION_TOKEN }}
      - name: Prepare TEST_IMAGE_TAG env
        run: |
          echo TEST_IMAGE_TAG=$(echo ${VERSION} | sed 's/\//-/g') >> $GITHUB_ENV
      - name: Build Docker images
        id: dockerBuild
        run: |
          for directory in `find * -maxdepth 10 -mindepth 0 -type f -name 'Dockerfile' | xargs dirname`
          do
            echo Run docker buildx build for $directory
            if [[ $directory == '.' ]]; then
              image=${{ github.event.repository.name }}
            else
              image=$directory
            fi
            docker buildx build --load --platform ${{ matrix.arch }} \
            -t ghcr.io/${GITHUB_REPOSITORY}/$image:${{ env.TEST_IMAGE_TAG }} \
            $directory
            IMAGES+=(\"ghcr.io/${GITHUB_REPOSITORY}/$image:${{ env.VERSION }}\")
          done
      - name: Show Docker images
        id: dockerImages
        run: docker images | grep ${GITHUB_REPOSITORY} || (echo Docker images not found && exit 1)
      - name: Maven Verify
        if: inputs.tests == true && github.event_name != 'release'
        run: |
          sudo echo "172.17.0.1 host.docker.internal" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 $(eval hostname)" | sudo tee -a /etc/hosts
          mvn verify ${{ matrix.mvn-verify-opts }} -Dgithub.event.release.prerelease="${{ github.event.release.prerelease }}" -B
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
      - name: Upload test containers logs
        if: always() && inputs.tests == true
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ github.run_id }}-${{ github.run_number }}-${{ runner.name }}
          path: target/logs/
          overwrite: true
  push:
    outputs:
     images: ${{ steps.pushDockerImages.outputs.images }}
    if: >
      inputs.force-publish == true 
      || (github.event_name == 'push' && (github.ref_name == 'develop' || github.ref_name == 'master' || github.ref_name == 'trivy' ))
      || github.event_name == 'release' 
    name: Push artifacts
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: test
        run: echo '# Push ðŸš€' >> $GITHUB_STEP_SUMMARY
      - name: Overwrite VERSION env
        run: |
          echo VERSION=$(echo ${VERSION} | sed 's/\//-/g') >> $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
      - name: Set up Maven
        run: cp build.settings.xml ~/.m2/settings.xml
      - name: Maven Build
        run: mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true -Ddockerfile.skip=true -Dgithub.event.release.prerelease="${{ github.event.release.prerelease }}" -B -V -U
        env:
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        run: docker login ghcr.io -u ${GITHUB_ACTOR} --password ${{ secrets.ORGANIZATION_TOKEN }}
      - name: Push Docker images
        id: pushDockerImages
        run: |
          IMAGES=()
          echo "## Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "| Image Name |" >> $GITHUB_STEP_SUMMARY
          echo "| - | ">> $GITHUB_STEP_SUMMARY
          for directory in `find * -maxdepth 10 -mindepth 0 -type f -name 'Dockerfile' | xargs dirname`
          do
            echo Run docker build for $directory
            if [[ $directory == '.' ]]; then
              image=${{ github.event.repository.name }}
            else
              image=$directory
            fi
            docker buildx build --push --platform linux/amd64,linux/arm64 \
            -t ghcr.io/${GITHUB_REPOSITORY}/$image:${{ env.VERSION }} \
            -t ghcr.io/${GITHUB_REPOSITORY}/$image:latest \
            $directory
            echo "| ghcr.io/${GITHUB_REPOSITORY}/$image:${{ env.VERSION }} |" >> $GITHUB_STEP_SUMMARY
            IMAGES+=(\"ghcr.io/${GITHUB_REPOSITORY}/$image:${{ env.VERSION }}\")
          done
          # Convert the array to a JSON string
          json_array="["
          for element in "${IMAGES[@]}"; do
              json_array+="$element,"
          done
          json_array="${json_array%,}]"
          echo "::set-output name=img::$json_array"

          VERSION=$(date +%Y%m%d%H%M%S)
          echo "images=$json_array" >> $GITHUB_OUTPUT
          echo "####################################"
          echo $VERSION
          echo "####################################"
          echo ${IMAGES[@]}
          echo "####################################"
          echo $json_array
      - name: Anchore scan current project
        uses: anchore/scan-action@v3
        with:
          path: "."    
          output-format: 'table'
          fail-build: false
      # - name: Install Trivy
      #   run: |
      #     curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      # - name: Verify Trivy Installation
      #   run: trivy --version

      # - name: Trivy scan images
      #   run: |
      #     for directory in `find * -maxdepth 10 -mindepth 0 -type f -name 'Dockerfile' | xargs dirname`
      #     do
      #       echo Run docker build for $directory
      #       if [[ $directory == '.' ]]; then
      #         image=${{ github.event.repository.name }}
      #       else
      #         image=$directory
      #       fi
      #       trivy image --quiet --severity CRITICAL,HIGH --exit-code 1 ghcr.io/${{ github.repository }}/$image:${{ env.VERSION }}
      #     done
  scan:
    if: >
      inputs.force-publish == true 
      || (github.event_name == 'push' && (github.ref_name == 'develop' || github.ref_name == 'master' || github.ref_name == 'trivy' ))
      || github.event_name == 'release' 
    name: Scan ${{ matrix.image }}
    needs: push
    strategy:
      fail-fast: false
      matrix:
        #scanner: [ 'trivy' ]
        image: ${{ fromJson(needs.push.outputs.images) }}
        #  image1:
        #    - "ghcr.io/exberry-io/fix-gateway/fix-gateway:trivy"
        #    - "ghcr.io/exberry-io/fix-gateway/fix-gateway-benchmarks:trivy"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Login to Docker
        run: docker login ghcr.io -u ${GITHUB_ACTOR} --password ${{ secrets.ORGANIZATION_TOKEN }}
      - name: Check image list
        run:
          echo ${{ fromJson(needs.push.outputs.images) }}
      - name: Anchore scan image
        uses: anchore/scan-action@v3
        with:
          image: "${{ matrix.image }}"
          output-format: 'table'
          fail-build: false
          registry-username: ${GITHUB_ACTOR}
          registry-password: ${{ secrets.ORGANIZATION_TOKEN }}
      - name: Trivy simple test
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ matrix.image }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          github-pat: ${{ secrets.ORGANIZATION_TOKEN }}
        env:
          TRIVY_USERNAME: ${GITHUB_ACTOR}
          TRIVY_PASSWORD: ${{ secrets.ORGANIZATION_TOKEN }}
      # Disable trivy SARIF
      #      - name: Trivy SARIF test
      #        uses: aquasecurity/trivy-action@master
      #        with:
      #          image-ref: "ghcr.io/exberry-io/fix-gateway/fix-gateway:trivy"
      #          format: 'sarif'
      #          exit-code: '0'
      #          ignore-unfixed: true
      #          vuln-type: 'os,library'
      #          severity: 'CRITICAL,HIGH'
      #          github-pat: ${{ secrets.ORGANIZATION_TOKEN }}
      #          output: 'trivy-results.sarif'
      #        env:
      #          TRIVY_USERNAME: ${GITHUB_ACTOR}
      #          TRIVY_PASSWORD: ${{ secrets.ORGANIZATION_TOKEN }}
      #      - name: Trivy SARIF upload to github
      #        uses: github/codeql-action/upload-sarif@v2
      #        with:
      #          sarif_file: 'trivy-results.sarif'



      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ matrix.image }}
          scan-type: image
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: 'dependency-results.sbom.json'
          github-pat: ${{ secrets.ORGANIZATION_TOKEN }}
        env:
          TRIVY_USERNAME: ${GITHUB_ACTOR}
          TRIVY_PASSWORD: ${{ secrets.ORGANIZATION_TOKEN }}

      - name: Make trivy template file with heredoc
        run: |
          cat << 'EOF' > template.tpl 
          {{- $critical := 0 }}
          {{- $high := 0 }}

          {{- range . }}
            {{- range .Vulnerabilities }}
              {{- if  eq .Severity "CRITICAL" }}
                {{- $critical = add $critical 1 }}
              {{- end }}
              {{- if  eq .Severity "HIGH" }}
                {{- $high = add $high 1 }}
              {{- end }}
            {{- end }}
          {{- end }}

          | VulnerabilityID | Severity |
          | - | - |
          {{- range .}}
            {{- range .Vulnerabilities }}
          | {{ .VulnerabilityID }} |  {{ .Severity }} |
            {{- end }}
          {{- end }}
          | Total Critical | {{ $critical }} |
          | Total High | {{ $high }} |
          EOF
      - name: Trivy template vulnerability test
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ matrix.image }}
          scan-type: image
          hide-progress: true
          format: 'template'
          template: '@template.tpl'
          exit-code: {{ inputs.fail-on-vulnerability-issues }}
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: 'scan-results.md'
          github-pat: ${{ secrets.ORGANIZATION_TOKEN }}
        env:
          TRIVY_USERNAME: ${GITHUB_ACTOR}
          TRIVY_PASSWORD: ${{ secrets.ORGANIZATION_TOKEN }}
      #- name: Test img outputs
      #  run: |
      #    echo ${{ needs.push.outputses }}
      #    echo "##############################"
      #    echo ${{ fromJson(needs.build.outputs.images) }}
      - name: Verify Trivy Installation
        run: cat scan-results.md >> $GITHUB_STEP_SUMMARY
          

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Verify Trivy Installation
        run: trivy --version

      - name: Scan Docker image with Trivy
        run: |
          echo "Scanning ${{ matrix.image }}"
          echo "check fail CI FLAG ${{ inputs.fail-on-vulnerability-issues }}"
          trivy image --severity CRITICAL,HIGH ${{ matrix.image }}
